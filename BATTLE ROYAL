import pygame
import sys

# Define colors
WHITE = (255, 255, 255)
BLACK = (0, 0, 0)
BLUE = (0, 0, 255)
GREEN = (0, 255, 0)
RED = (255, 0, 0)
GRAY = (192, 192, 192)

# Game constants
SCREEN_WIDTH = 1920
SCREEN_HEIGHT = 1080
GRID_SIZE = 50
WOOD_COST = 10
BRICK_COST = 10
METAL_COST = 10

# Initialize Pygame
pygame.init()
screen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))
pygame.display.set_caption("Battle Royale Game")

# Player class
class Player(pygame.sprite.Sprite):
    def __init__(self, x, y, color):
        super().__init__()
        self.image = pygame.Surface((50, 50))
        self.image.fill(color)
        self.rect = self.image.get_rect()
        self.rect.center = (x, y)
        self.speed = 5
        self.direction = pygame.math.Vector2(0, 0)
        self.health = 100
        self.shield = 100
        self.ammo = 30
        self.max_ammo = 30
        self.building_plan = None  # Current building plan (wall, floor, stair)
        self.building_preview_rect = None  # Preview rectangle for building placement
        self.walls = []  # List to store placed walls
        self.score = 0

    def move(self):
        self.rect.x += self.direction.x * self.speed
        self.rect.y += self.direction.y * self.speed
        self.rect.x = max(0, min(self.rect.x, SCREEN_WIDTH - self.rect.width))
        self.rect.y = max(0, min(self.rect.y, SCREEN_HEIGHT - self.rect.height))

    def select_building_plan(self, plan):
        self.building_plan = plan

    def update_building_preview(self, mouse_x, mouse_y):
        if self.building_plan:
            grid_pos_x = mouse_x // GRID_SIZE
            grid_pos_y = mouse_y // GRID_SIZE
            self.building_preview_rect = pygame.Rect(grid_pos_x * GRID_SIZE, grid_pos_y * GRID_SIZE, GRID_SIZE, GRID_SIZE)

    def build(self):
        if self.building_plan and self.building_preview_rect:
            grid_pos_x = self.building_preview_rect.x // GRID_SIZE
            grid_pos_y = self.building_preview_rect.y // GRID_SIZE

            # Check if there's already a wall at the target grid cell
            if any(wall.grid_x == grid_pos_x and wall.grid_y == grid_pos_y for wall in self.walls):
                return  # Don't build if there's already a wall there

            if self.building_plan == "wall":
                if self.ammo >= WOOD_COST:
                    self.ammo -= WOOD_COST
                    new_wall = Wall(grid_pos_x * GRID_SIZE, grid_pos_y * GRID_SIZE)
                    self.walls.append(new_wall)
            elif self.building_plan == "floor":
                if self.ammo >= BRICK_COST:
                    self.ammo -= BRICK_COST
                    new_wall = Wall(grid_pos_x * GRID_SIZE, grid_pos_y * GRID_SIZE)
                    self.walls.append(new_wall)
            elif self.building_plan == "stair":
                if self.ammo >= METAL_COST:
                    self.ammo -= METAL_COST
                    new_wall = Wall(grid_pos_x * GRID_SIZE, grid_pos_y * GRID_SIZE)
                    self.walls.append(new_wall)

    def draw_walls(self, screen):
        for wall in self.walls:
            pygame.draw.rect(screen, GRAY, wall.rect)

    def handle_events(self, event):
        if event.type == pygame.KEYDOWN:
            # Customize key bindings here
            if event.key == pygame.K_w:
                self.direction.y = -1
            elif event.key == pygame.K_s:
                self.direction.y = 1
            elif event.key == pygame.K_a:
                self.direction.x = -1
            elif event.key == pygame.K_d:
                self.direction.x = 1
            elif event.key == pygame.K_SPACE:
                self.jump()
            elif event.key == pygame.K_1:
                self.select_building_plan("wall")
            elif event.key == pygame.K_2:
                self.select_building_plan("floor")
            elif event.key == pygame.K_3:
                self.select_building_plan("stair")
        elif event.type == pygame.KEYUP:
            # Customize key releases here if needed
            if event.key == pygame.K_w and self.direction.y == -1:
                self.direction.y = 0
            elif event.key == pygame.K_s and self.direction.y == 1:
                self.direction.y = 0
            elif event.key == pygame.K_a and self.direction.x == -1:
                self.direction.x = 0
            elif event.key == pygame.K_d and self.direction.x == 1:
                self.direction.x = 0
        elif event.type == pygame.MOUSEBUTTONDOWN:
            if event.button == 1:  # Left click to build
                self.build()
            elif event.button == 3:  # Right click to cancel building
                self.building_plan = None
                self.building_preview_rect = None

    def update(self):
        self.move()
        self.update_building_preview(pygame.mouse.get_pos()[0], pygame.mouse.get_pos()[1])

    def draw(self, screen):
        self.draw_walls(screen)
        pygame.draw.rect(screen, self.image, self.rect)

class Wall(pygame.sprite.Sprite):
    def __init__(self, x, y):
        super().__init__()
        self.image = pygame.Surface((GRID_SIZE, GRID_SIZE))
        self.image.fill(GRAY)
        self.rect = self.image.get_rect()
        self.rect.x = x
        self.rect.y = y
        self.grid_x = x // GRID_SIZE
        self.grid_y = y // GRID_SIZE

def main():
    # Initialize game
    pygame.display.init()
    screen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))
    pygame.display.set_caption("Battle Royale Game")
    clock = pygame.time.Clock()

    # Create player
    player = Player(100, 100, BLUE)

    # Game loop
    running = True
    while running:
        # Handle events
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                running = False
            player.handle_events(event)

        # Update
        player.update()

        # Draw
        screen.fill(WHITE)
        player.draw(screen)
        pygame.display.flip()

        # Cap the frame rate
        clock.tick(60)

    pygame.quit()
    sys.exit()

if __name__ == "__main__":
    main()
